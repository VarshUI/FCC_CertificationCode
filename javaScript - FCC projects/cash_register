function checkCashRegister(price, cash, cid) {
  // Define currency units
  const currencyUnits = [
    ["PENNY", 0.01],
    ["NICKEL", 0.05],
    ["DIME", 0.10],
    ["QUARTER", 0.25],
    ["ONE", 1.00],
    ["FIVE", 5.00],
    ["TEN", 10.00],
    ["TWENTY", 20.00],
    ["ONE HUNDRED", 100.00]
  ];

  let changeDue = cash - price;
  let totalCid = cid.reduce((sum, curr) => sum + curr[1], 0).toFixed(2); // Total cash-in-drawer
  
  // Check if there's insufficient funds
  if (parseFloat(totalCid) < changeDue) {
    return { status: "INSUFFICIENT_FUNDS", change: [] };
  }

  // Check if total cash in drawer equals the change due
  if (parseFloat(totalCid) === changeDue) {
    return { status: "CLOSED", change: cid };
  }

  // Initialize the change array
  let change = [];

  // Loop over currency units from highest to lowest
  for (let i = currencyUnits.length - 1; i >= 0; i--) {
    let currencyName = currencyUnits[i][0];
    let currencyValue = currencyUnits[i][1];
    let currencyAvailable = cid[i][1];

    if (changeDue >= currencyValue) {
      let amountToReturn = 0;

      // Calculate the maximum amount that can be returned using the available currency
      while (changeDue >= currencyValue && currencyAvailable > 0) {
        changeDue -= currencyValue;
        changeDue = changeDue.toFixed(2); // Fix floating point precision issues
        currencyAvailable -= currencyValue;
        amountToReturn += currencyValue;
      }

      if (amountToReturn > 0) {
        change.push([currencyName, amountToReturn]);
      }
    }
  }

  // If exact change can't be returned
  if (changeDue > 0) {
    return { status: "INSUFFICIENT_FUNDS", change: [] };
  }

  // Return the change array if there's sufficient funds
  return { status: "OPEN", change: change };
}

// Example test case
console.log(checkCashRegister(19.5, 20, [
  ["PENNY", 1.01],
  ["NICKEL", 2.05],
  ["DIME", 3.1],
  ["QUARTER", 4.25],
  ["ONE", 90],
  ["FIVE", 55],
  ["TEN", 20],
  ["TWENTY", 60],
  ["ONE HUNDRED", 100]
]));
